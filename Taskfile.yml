version: 3

vars:
  SHORT_SHA:
    shell: git rev-parse --short HEAD

dotenv:
  - ./gitea/.env
  - ./homepage/.env
  - ./promstack/.env
  - ./zitadel/.env

tasks:
  setup-k8s:
    desc: Run first-time K8s setup
    dir: ansible
    cmds:
      - task: bootstrap-vms
      - task: setup-k8s-master
      - task: setup-k8s-workers
      - task: setup-nfs-provisioner
      - task: setup-traefik
      - task: setup-promstack
      - task: setup-longhorn

  bootstrap-vms:
    desc: Install pre-requisites in VMs
    internal: true
    dir: ansible
    cmds:
      - ansible-playbook -i inventory/hosts playbooks/setup.yml

  setup-k8s-master:
    internal: true
    desc: Setup K8s master node
    dir: ansible
    cmds:
      - ansible-playbook -i inventory/hosts playbooks/setup-k8s-master.yml

  setup-k8s-workers:
    internal: true
    desc: Setup K8s worker nodes
    dir: ansible
    cmds:
      - ansible-playbook -i inventory/hosts playbooks/setup-k8s-workers.yml

  setup-nfs-provisioner:
    desc: Setup K8s NFS storage provisioner
    dir: nfs-provisioner
    cmds:
      - >
        helm upgrade --install nfs-provisioner
        nfs-subdir-external-provisioner/nfs-subdir-external-provisioner
        --namespace kube-system
        --values values.yaml

  setup-traefik:
    desc: Setup Traefik
    dir: traefik
    cmds:
      - kubectl apply -f namespace.yaml
      - kubectl apply -f secrets.yaml
      - >
        helm upgrade --install traefik traefik/traefik
        --namespace traefik
        --create-namespace
        --values values.yaml
      - kubectl apply -f middlewares.yaml

  setup-gitea:
    desc: Setup Gitea
    dir: gitea
    cmds:
      - kubectl apply -f namespace.yaml
      - kubectl apply -f configmap.yaml
      - >
        helm upgrade --install gitea gitea/gitea
        --namespace gitea
        --create-namespace
        --values values.yaml
        --set gitea.admin.username={{.GITEA_ADMIN_USERNAME}}
        --set gitea.admin.password={{.GITEA_ADMIN_PASSWORD}}
        --set gitea.admin.email={{.GITEA_ADMIN_EMAIL}}
        --set postgresql.auth.database={{.GITEA_POSTGRES_DATABASE}}
        --set postgresql.auth.password={{.GITEA_POSTGRES_PASSWORD}}
        --set postgresql.auth.username={{.GITEA_POSTGRES_USERNAME}}

  setup-gitea-act-runner:
    desc: Setup Gitea act runner
    dir: ansible
    cmds:
      - ansible-playbook -i inventory/hosts playbooks/setup-gitea-act-runner.yml

  setup-homepage:
    desc: Setup Homepage
    dir: homepage
    cmds:
      - >
        helm upgrade --install homepage jameswynn/homepage
        --namespace homepage
        --create-namespace
        --values values.yaml
        --set config.services[0].Networking[0].Cloudflare.widget.accountid={{.CLOUDFLARE_ACCOUNT_ID}}
        --set config.services[0].Networking[0].Cloudflare.widget.tunnelid={{.CLOUDFLARE_TUNNEL_ID}}
        --set config.services[0].Networking[0].Cloudflare.widget.key={{.CLOUDFLARE_KEY}}

  reload-homepage:
    desc: Reload Homepage with new configuration
    dir: homepage
    cmds:
      - task: setup-homepage
      - kubectl rollout restart deployment homepage --namespace homepage

  setup-portainer:
    desc: Setup Portainer
    dir: portainer
    cmds:
      - >
        helm upgrade --install portainer portainer/portainer
        --namespace portainer
        --create-namespace
        --values values.yaml

  setup-vaultwarden:
    desc: Setup Vaultwarden
    dir: vaultwarden
    ignore_error: true
    cmds:
      - kubectl apply -f namespace.yaml
      - kubectl apply -f secrets.yaml
      - >
        helm upgrade --install postgres bitnami/postgresql
        --create-namespace
        --namespace vaultwarden
        --values pg-values.yaml
      - >
        helm upgrade --install vaultwarden vaultwarden/vaultwarden
        --create-namespace
        --namespace vaultwarden
        --values values.yaml

  setup-argocd:
    desc: Setup ArgoCD
    dir: argocd
    cmds:
      - kubectl apply -f namespace.yaml
      - kubectl ns argocd
      - kubectl apply -f install.yaml
      - kubectl apply -f ingress.yaml

  setup-zitadel:
    desc: Setup Zitadel
    dir: zitadel
    cmds:
      - kubectl apply -f namespace.yaml
      - kubectl apply -f secrets.yaml
      - >
        helm upgrade --install crdb cockroachdb/cockroachdb
        --create-namespace
        --namespace zitadel
        --values crdb-values.yaml
      - >
        helm upgrade --install zitadel zitadel/zitadel
        --create-namespace
        --namespace zitadel
        --values values.yaml

  setup-promstack:
    desc: Setup Promstack
    dir: promstack
    cmds:
      - kubectl apply -f namespace.yaml
      - kubectl apply -f secrets.yaml
      - >
        helm upgrade --install prometheus prometheus/kube-prometheus-stack
        --namespace promstack
        --values values.yaml
        --set-string grafana.adminPassword={{.GRAFANA_PASSWORD}}
        --set-string grafana.ingress.annotations."gethomepage\.dev/widget\.password"={{.GRAFANA_PASSWORD}}

  setup-minio:
    desc: Setup MinIO
    dir: minio
    cmds:
      - kubectl apply -f namespace.yaml
      - kubectl apply -f secrets.yaml
      - >
        helm upgrade --install minio bitnami/minio
        --create-namespace
        --namespace minio
        --values values.yaml

  setup-nextcloud:
    desc: Setup Nextcloud
    dir: nextcloud
    cmds:
      - kubectl apply -f namespace.yaml
      - kubectl apply -f secrets.yaml
      - >
        helm upgrade --install nextcloud nextcloud/nextcloud
        --namespace nextcloud
        --values values.yaml

  setup-uptime:
    desc: Setup Uptime Kuma
    dir: uptime-kuma
    cmds:
      - kubectl apply -f namespace.yaml
      - kubectl apply -f secrets.yaml
      - >
        helm upgrade --install uptime k3/uptime-kuma
        --namespace uptime
        --values values.yaml

  setup-tandoor:
    desc: Setup Tandoor
    dir: tandoor
    cmds:
      - kubectl apply -f namespace.yaml
      - kubectl apply -f secrets.yaml
      - >
        helm upgrade --install postgres bitnami/postgresql
        --namespace tandoor
        --values pg-values.yaml
      - helm upgrade --install tandoor ./tandoor --namespace tandoor

  setup-longhorn:
    desc: Setup Longhorn
    dir: longhorn
    cmds:
      - kubectl apply -f namespace.yaml
      - kubectl apply -f longhorn-iscsi-installation.yaml
      - >
        helm upgrade --install longhorn longhorn/longhorn
        --namespace longhorn-system
        --create-namespace
        --values values.yaml

  setup-jellyfin:
    desc: Setup Jellyfin
    dir: arrstack
    cmds:
      - kubectl apply -f namespace.yaml
      - helm upgrade --install jellyfin ./jellyfin --namespace arrstack

  setup-calibre:
    desc: Setup Calibre
    dir: arrstack
    cmds:
      - kubectl apply -f namespace.yaml
      - helm upgrade --install calibre ./calibre --namespace arrstack

  setup-navidrome:
    desc: Setup Navidrome
    dir: arrstack
    cmds:
      - kubectl apply -f namespace.yaml
      - helm upgrade --install navidrome ./navidrome --namespace arrstack

  setup-arrstack:
    desc: Setup Arrstack
    dir: arrstack
    cmds:
      - kubectl apply -f namespace.yaml
      - helm upgrade --install flaresolverr ./flaresolverr --namespace arrstack
      - helm upgrade --install qbittorrent ./qbittorrent --namespace arrstack
      - helm upgrade --install prowlarr ./prowlarr --namespace arrstack
      - helm upgrade --install sonarr ./sonarr --namespace arrstack
      - helm upgrade --install radarr ./radarr --namespace arrstack
      - helm upgrade --install readarr ./readarr --namespace arrstack
      - helm upgrade --install lidarr ./lidarr --namespace arrstack
      - helm upgrade --install jellyseerr ./jellyseerr --namespace arrstack
