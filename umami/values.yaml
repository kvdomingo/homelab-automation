# Default values for umami.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: docker.umami.is/umami-software/umami
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: postgresql-v2.12.1

imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: { }
podLabels: { }

podSecurityContext: { }
# fsGroup: 2000

securityContext: { }
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 3000

ingress:
  enabled: true
  annotations:
    gethomepage.dev/enabled: "true"
    gethomepage.dev/name: "Umami"
    gethomepage.dev/group: "Analytics"
    gethomepage.dev/icon: "umami"
    gethomepage.dev/ping: "umami.lab.kvd.studio"
  hosts:
    - host: umami.lab.kvd.studio
      paths:
        - path: /
          pathType: Prefix
  tls: [ ]

resources: { }
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: [ ]
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: [ ]
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: { }

tolerations: [ ]

affinity: { }

postgresql:
  image:
    repository: bitnami/postgresql
    tag: 16.3.0-debian-12-r20
  auth:
    username: umami
    database: umami
    existingSecret: umami-secrets
    secretKeys:
      userPasswordKey: POSTGRESQL_PASSWORD
      replicationPasswordKey: POSTGRESQL_PASSWORD
      adminPasswordKey: POSTGRESQL_PASSWORD
  primary:
    readinessProbe:
      enabled: false
    livenessProbe:
      enabled: false
    persistence:
      enabled: true
      annotations:
        argocd.argoproj.io/sync-options: Delete=false,Prune=false
  volumePermissions:
    enabled: true
