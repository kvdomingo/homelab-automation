- name: Initial WSL setup
  hosts: local
  vars:
    JETBRAINS_TOOLBOX_VERSION: jetbrains-toolbox-2.1.3.18901

  tasks:
    - name: Update apt
      become: true
      apt:
        update_cache: true
        upgrade: yes

    - name: Install basics
      become: true
      package:
        name:
          - apache2-utils
          - apt-transport-https
          - asciinema
          - build-essential
          - ca-certificates
          - curl
          - direnv
          - gedit
          - git
          - gnupg
          - gpg
          - libbz2-dev
          - libffi-dev
          - libfuse2
          - liblzma-dev
          - libncursesw5-dev
          - libreadline-dev
          - libsqlite3-dev
          - libssl-dev
          - libxmlsec1-dev
          - libxml2-dev
          - lsb-release
          - net-tools
          - python3
          - tk-dev
          - tmux
          - unzip
          - wget
          - xsel
          - xz-utils
          - zlib1g-dev
          - zsh
          - zsh-syntax-highlighting
        state: latest

    - name: Setup dotfiles
      block:
        - name: Clone dotrepo
          git:
            repo: https://github.com/kvdomingo/dotrepo.git
            dest: ~/dotrepo
            clone: true
            force: true
        - name: Delete existing .zshrc
          file:
            path: ~/.zshrc
            state: absent
            force: true
        - name: Delete existing .bashrc
          file:
            path: ~/.bashrc
            state: absent
            force: true
        - name: Install dotrepo
          shell:
            chdir: ~/dotrepo
            cmd: ./install
          ignore_errors: true

    - name: Download & install neovim
      get_url:
        url: https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
        dest: ~/.local/bin/nvim
        mode: "0755"

    - name: Install tmux plugin manager
      git:
        repo: https://github.com/tmux-plugins/tpm
        dest: ~/.tmux/plugins/tpm
        clone: true

    - name: Install shell utilities
      block:
        - name: Delete existing oh-my-zsh directory
          file:
            path: ~/.oh-my-zsh
            state: absent
            force: true
        - name: Download oh-my-zsh
          get_url:
            url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
            dest: ~/Downloads/install-oh-my-zsh.sh
            mode: "0755"
        - name: Install oh-my-zsh
          shell:
            chdir: ~/Downloads
            cmd: sh install-oh-my-zsh.sh --unattended --keep-zshrc
            creates: ~/.oh-my-zsh
        - name: Install oh-my-zsh plugins
          block:
            - name: Install wakatime plugin
              git:
                repo: https://github.com/sobolevn/wakatime-zsh-plugin.git
                dest: ~/.oh-my-zsh/custom/plugins/wakatime
                clone: true
            - name: Install zsh-autosuggestions plugin
              git:
                repo: https://github.com/zsh-users/zsh-autosuggestions
                dest: ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
                clone: true
            - name: Install zsh-history-substring-search plugin
              git:
                repo: https://github.com/zsh-users/zsh-history-substring-search
                dest: ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search
                clone: true
        - name: Download starship.rs
          get_url:
            url: https://starship.rs/install.sh
            dest: ~/Downloads/install-starship.sh
            mode: "0755"
        - name: Install starship.rs
          shell:
            chdir: ~/Downloads
            cmd: ./install-starship.sh -y
        - name: Download zoxide
          get_url:
            url: https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh
            dest: ~/Downloads/install-zoxide.sh
            mode: "0755"
        - name: Install zoxide
          shell:
            chdir: ~/Downloads
            cmd: ./install-zoxide.sh

    - name: Install essential utilities
      block:
        - name: Install yq
          get_url:
            url: https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            dest: ~/.local/bin/yq
            mode: "0755"
        - name: Install jq
          get_url:
            url: https://github.com/jqlang/jq/releases/latest/download/jq-linux-amd64
            dest: ~/.local/bin/jq
            mode: "0755"
        - name: Download Taskfile
          get_url:
            url: https://taskfile.dev/install.sh
            dest: ~/Downloads/install-task.sh
            mode: "0755"
        - name: Install Taskfile
          shell:
            chdir: ~/Downloads
            cmd: ./install-task.sh -d -b ~/.local/bin
            creates: ~/.local/bin/task

    - name: Install asdf
      block:
        - name: Clone asdf-vm
          git:
            repo: https://github.com/asdf-vm/asdf.git
            dest: ~/.asdf
            clone: true
            version: v0.13.1
        - name: Load asdf
          shell:
            cmd: ASDF_DIR=~/.asdf . ~/.asdf/asdf.sh
        - name: Install asdf-vm plugins
          shell:
            cmd: |
              asdf plugin add adr-tools
              asdf plugin add golang
              asdf plugin add java https://github.com/halcyon/asdf-java.git
              asdf plugin add nodejs
              asdf plugin add poetry
              asdf plugin add python
              asdf plugin add just
              asdf plugin add rust
              asdf plugin add gleam
        - name: Install asdf tools
          shell:
            cmd: asdf install

    - name: Install/update global Python packages
      pip:
        name:
          - pip
          - pre-commit
          - ansible
        state: latest

    - name: Install/update global Node.js package managers
      block:
        - name: Install npm
          npm:
            name: npm
            state: latest
            global: true
        - name: Install yarn
          npm:
            name: yarn
            state: latest
            global: true
        - name: Install pnpm
          npm:
            name: pnpm
            state: latest
            global: true

    - name: Configure Poetry
      shell:
        cmd: poetry config virtualenvs.in-project true

    - name: Setup Bun
      block:
        - name: Download Bun
          get_url:
            url: https://bun.sh/install
            dest: ~/Downloads/install-bun.sh
            mode: "0755"
        - name: Install Bun
          shell:
            chdir: ~/Downloads
            cmd: ./install-bun.sh

    - name: Install/update global Go packages
      shell:
        cmd: |
          go install github.com/cosmtrek/air@latest
          go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          go install github.com/jesseduffield/lazygit@latest
          go install github.com/jesseduffield/lazydocker@latest
          go install github.com/owenrumney/lazytrivy@latest

    - name: Setup k8s development environment
      block:
        - name: Ensure kubeconfig is not world-readable
          file:
            path: ~/.kube/config
            state: file
            mode: "0600"
        - name: Copy kubeconfig
          copy:
            src: ~/.kube/config
            dest: ~/.kube/config.yaml
            mode: "0600"
        - name: Download Helm
          get_url:
            url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            dest: ~/Downloads/install-helm.sh
            mode: "0755"
        - name: Install Helm
          shell:
            chdir: ~/Downloads
            cmd: ./install-helm.sh
        - name: Install Krew
          shell:
            cmd: |
              (
                set -x; cd "$(mktemp -d)" &&
                OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
                ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
                KREW="krew-${OS}_${ARCH}" &&
                curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
                tar zxvf "${KREW}.tar.gz" &&
                ./"${KREW}" install krew
              )
        - name: Install kubens/kubectx
          shell:
            cmd: kubectl krew install ctx ns

    - name: Setup wakatime
      block:
        - name: Download wakatime
          get_url:
            url: https://raw.githubusercontent.com/wakatime/vim-wakatime/master/scripts/install_cli.py
            dest: ~/Downloads/install_wakatime.py
            mode: "0755"
        - name: Install wakatime
          script: ~/Downloads/install_wakatime.py
          args:
            executable: python

    - name: Setup JetBrains Toolbox
      block:
        - name: Download JetBrains Toolbox
          get_url:
            url: https://download.jetbrains.com/toolbox/{{ JETBRAINS_TOOLBOX_VERSION }}.tar.gz
            dest: ~/Downloads/{{ JETBRAINS_TOOLBOX_VERSION }}.tar.gz
        - name: Untar JetBrains Toolbox
          unarchive:
            src: ~/Downloads/{{ JETBRAINS_TOOLBOX_VERSION }}.tar.gz
            dest: ~/Downloads
        - name: Install JetBrains Toolbox
          shell:
            chdir: ~/Downloads/{{ JETBRAINS_TOOLBOX_VERSION }}
            cmd: ./jetbrains-toolbox
            creates: ~/.local/share/JetBrains/Toolbox/bin/jetbrains-toolbox

    - name: Install HashiCorp software
      become: true
      block:
        - name: Download HashiCorp gpg key
          get_url:
            url: https://apt.releases.hashicorp.com/gpg
            dest: ~/Downloads/hashicorp.gpg
            mode: "0440"
        - name: Add HashiCorp gpg key
          shell:
            cmd: gpg --dearmor --yes -o /usr/share/keyrings/hashicorp-archive-keyring.gpg ~/Downloads/hashicorp.gpg
        - name: Get architecture
          command:
            cmd: dpkg --print-architecture
          register: architecture
        - name: Get distribution codename
          command:
            cmd: lsb_release -cs
          register: codename
        - name: Add HashiCorp repo to sources
          lineinfile:
            path: /etc/apt/sources.list.d/hashicorp.list
            line: deb [arch={{ architecture.stdout }} signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ codename.stdout }} main
            create: true
        - name: Update apt
          apt:
            update_cache: true
            upgrade: yes
        - name: Install HashiCorp Vault & Terraform
          package:
            name:
              - vault
              - terraform
            state: latest

    - name: Setup AWS CLI
      become: true
      block:
        - name: Download AWS CLI
          get_url:
            url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
            dest: ~/Downloads/awscliv2.zip
        - name: Unzip AWS CLI
          unarchive:
            src: ~/Downloads/awscliv2.zip
            dest: ~/Downloads
        - name: Install AWS CLI
          shell:
            chdir: ~/Downloads/aws
            cmd: ./install --update

    - name: Setup Azure CLI
      become: true
      block:
        - name: Download Azure CLI
          get_url:
            url: https://aka.ms/InstallAzureCLIDeb
            dest: ~/Downloads/InstallAzureCLIDeb
            mode: "0755"
        - name: Install Azure CLI
          shell:
            chdir: ~/Downloads
            cmd: ./InstallAzureCLIDeb

    - name: Install gcloud CLI
      become: true
      block:
        - name: Download gcloud gpg key
          get_url:
            url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
            dest: ~/Downloads/gcloud-apt-key.gpg
            mode: "0440"
        - name: Add gcloud gpg key
          shell:
            cmd: gpg --dearmor --yes -o /usr/share/keyrings/cloud.google.gpg ~/Downloads/gcloud-apt-key.gpg
        - name: Add gcloud repository to sources
          lineinfile:
            path: /etc/apt/sources.list.d/google-cloud-sdk.list
            line: deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main
            create: true
        - name: Update apt
          apt:
            update_cache: true
            upgrade: yes
        - name: Install gcloud CLI
          package:
            name: google-cloud-cli
            state: latest

    - name: Install Supabase CLI
      block:
        - name: Download Supabase CLI
          get_url:
            url: https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz
            dest: ~/Downloads/supabase_linux_amd64.tar.gz
        - name: Extract Supabase CLI
          unarchive:
            src: ~/Downloads/supabase_linux_amd64.tar.gz
            dest: ~/Downloads
        - name: Install Supabase CLI
          copy:
            src: ~/Downloads/supabase
            dest: ~/.local/bin/supabase
            mode: "0755"

    - name: Install Firebase tools
      block:
        - name: Download Firebase tools
          get_url:
            url: https://firebase.tools
            dest: ~/Downloads/firebase-tools
            mode: "0700"
        - name: Install Firebase tools
          shell:
            cmd: ~/Downloads/firebase-tools.sh

    - name: Install Snyk CLI
      block:
        - name: Download Snyk CLI
          get_url:
            url: https://static.snyk.io/cli/latest/snyk-linux
            dest: /usr/local/bin/snyk
            mode: "0755"

    - name: Install Cloudflare CLI
      get_url:
        url: https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
        dest: /usr/local/bin/cloudflared
        mode: "0755"
