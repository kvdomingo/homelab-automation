# Default values for librechat.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/danny-avila/librechat
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: v0.7.7

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: [ ]
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: { }
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: { }

podSecurityContext: { }
# fsGroup: 2000

securityContext: { }
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 3080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  #  className: ""
  annotations:
    gethomepage.dev/enabled: "true"
    gethomepage.dev/name: "LibreChat"
    gethomepage.dev/group: "Apps"
    gethomepage.dev/icon: "si-livechat"
    gethomepage.dev/ping: "https://chat.lab.kvd.studio/health"
  hosts:
    - host: chat.lab.kvd.studio
      paths:
        - path: /
          pathType: Prefix
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 250m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: http
readinessProbe:
  httpGet:
    path: /health
    port: http

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

pdb:
  enabled: false
  minAvailable: 2

# Additional volumes on the output Deployment definition.
volumes: [ ]
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: [ ]
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: { }

tolerations: [ ]

affinity: { }

librechatConfig:
  version: 1.1.7
  cache: false
  endpoints:
    custom:
      - name: xai
        apiKey: "${XAI_API_KEY}"
        MODELS:
          default: [ grok-2-latest ]
          fetch: false
        titleConvo: true
        titleMethod: completion
        titleModel: grok-2-latest
        summarize: false
        summaryModel: grok-2-latest
        forcePrompt: false
        modelDisplayLabel: Grok

mongodb:
  architecture: standalone
  auth:
    enabled: true
    usernames: [ librechat ]
    databases: [ librechat ]
    username: librechat
    database: librechat
    existingSecret: librechat-secrets
  readinessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 30
  livenessProbe:
    enabled: true
    periodSeconds: 20
    successThreshold: 1
    failureThreshold: 3
    timeoutSeconds: 3
  persistence:
    enabled: true
  volumePermissions:
    enabled: true
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

rag:
  image:
    repository: ghcr.io/danny-avila/librechat-rag-api-dev-lite
    tag: latest
  service:
    port: 8000
    type: ClusterIP
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

meilisearch:
  image:
    repository: getmeili/meilisearch
    tag: v1.12.3
  service:
    port: 7700
    type: ClusterIP
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
